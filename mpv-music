#!/usr/bin/env bash
# Purpose: MPV wrapper for music playback
set -euo pipefail

# --- Configuration ---
CONFIG_DIR="$HOME/.config/mpv-music"
CONFIG_FILE="$CONFIG_DIR/mpv-music.conf"
MUSIC_INDEX_FILE="$CONFIG_DIR/music_index.json"

# Default values (will be overridden by config file if it exists)
MUSIC_DIRS_DEFAULT=("$HOME/Music")
MPV_ARGS_DEFAULT=(--loop-playlist=inf --shuffle --no-video)
AUDIO_EXTS_DEFAULT="mp3 flac wav m4a aac ogg opus wma alac aiff amr"
VIDEO_EXTS_DEFAULT="mp4 mkv webm avi mov flv wmv mpeg mpg 3gp ts vob m4v"

# Ensure config directory exists
mkdir -p "$CONFIG_DIR"

# --- Trap for cleanup ---
trap 'rm -f "$temp_folder_list" "$temp_track_list"' EXIT
temp_folder_list=""
temp_track_list=""

# Check if config file exists, if not, create a default one
if [[ ! -f "$CONFIG_FILE" ]]; then
    cat <<EOF > "$CONFIG_FILE"
# mpv-music configuration file

# Default music directories (space-separated)
# You can add multiple paths, e.g., MUSIC_DIRS="\$HOME/Music /mnt/my_music_drive/audio"
MUSIC_DIRS="${MUSIC_DIRS_DEFAULT[*]}"

# Default MPV arguments (space-separated)
# These will be used if no other MPV args are passed on the command line.
# Example: MPV_DEFAULT_ARGS="--loop-playlist=inf --shuffle --no-video --volume=50"
MPV_DEFAULT_ARGS="${MPV_ARGS_DEFAULT[*]}"

# Audio extensions (space-separated)
# These are used when --video-ok is NOT specified.
AUDIO_EXTS="$AUDIO_EXTS_DEFAULT"

# Video extensions (space-separated)
# These are added to AUDIO_EXTS when --video-ok IS specified.
VIDEO_EXTS="$VIDEO_EXTS_DEFAULT"
EOF
    echo "Created default config file at $CONFIG_FILE"
fi

# Source the configuration file
# This will set the variables like MUSIC_DIRS, MPV_DEFAULT_ARGS, etc.
# shellcheck source=/dev/null
. "$CONFIG_FILE"

# Convert space-separated strings from config into arrays
IFS=' ' read -ra MUSIC_DIRS_ARRAY <<< "$MUSIC_DIRS"
IFS=' ' read -ra MPV_DEFAULT_ARGS_ARRAY <<< "$MPV_DEFAULT_ARGS"
IFS=' ' read -ra AUDIO_EXTS_ARRAY <<< "$AUDIO_EXTS"
IFS=' ' read -ra VIDEO_EXTS_ARRAY <<< "$VIDEO_EXTS"


# --- Dependency Checks ---
if ! command -v mpv &>/dev/null || ! command -v fzf &>/dev/null; then
  echo "Missing dependencies. mpv-music requires:"
  echo "- mpv: media player (https://mpv.io)"
  echo "- fzf: fuzzy finder (https://github.com/junegunn/fzf)"
  echo "Install them and try again."
  exit 1
fi

if ! command -v yt-dlp &>/dev/null; then
  echo "Warning: yt-dlp not found. URL playback might be limited."
  echo "Install yt-dlp (https://github.com/yt-dlp/yt-dlp/) for full URL support."
  # no exit here, cuz local file/folder playback
fi

if ! command -v ffprobe &>/dev/null; then
  echo "Error: ffprobe not found. Metadata features will be unavailable."
  echo "ffprobe is part of the FFmpeg suite. Install FFmpeg (https://ffmpeg.org/download.html) and try again."
  exit 1 # cuz metadata is a core feature
fi

if ! command -v jq &>/dev/null; then
  echo "Error: jq not found. Metadata indexing and advanced features will be unavailable."
  echo "Install jq (e.g., sudo apt install jq or brew install jq) for full functionality."
  exit 1 # index file is json, so need jq for parsing metadata
fi

if ! command -v mediainfo &>/dev/null; then
  echo "Warning: mediainfo not found. Metadata extraction for some files (e.g., certain Opus) might be limited."
  echo "Install mediainfo (e.g., sudo apt install mediainfo or brew install mediainfo)."
fi

if ! command -v find &>/dev/null || ! find --version 2>&1 | grep -q 'GNU findutils'; then
  echo "Error: GNU find is required. Your system might be using BSD find."
  echo "Please install GNU findutils!"
  exit 1
fi

# --- Helper Functions (Defined before main execution logic) ---

# --- Help Function ---
show_help() {
  cat <<EOF
🦍 MPV Music Script – Monke Wrapper 🍌 (v$VERSION)

Usage:
  mpv-music [PATH_OR_URL_OR_MUSIC_DIR] [OPTIONS]

Examples:
  mpv-music                       # Uses directories from config with default mpv flags
  mpv-music /path/to/music        # Uses custom folder with default mpv flags
  mpv-music ~/Music/song.mp3      # Plays a specific local file directly
  mpv-music https://maybeaurl/file # Plays a file from URL directly (requires yt-dlp)
  mpv-music --no-video --volume=20 # Uses config directories with custom flags
  mpv-music /path/to/music --no-video # Custom folder + custom flags

Options:
  -h, --help        Show this help message and exit
  -v, --version     Show version and exit
  --video-ok        Include video file formats (defined in config)
  --ext=EXT1,EXT2   Use only specified extensions (comma-separated, overrides config)
  --refresh-index   Force a smart update of the music index (checks file changes).
  --reindex         Force a complete rebuild of the music index (resets everything).

Interactive Modes:
  1) Album mode: Pick entire folders
  2) Track mode: Pick individual files

MPV default flags (if none passed via command line):
  $(echo "${MPV_DEFAULT_ARGS_ARRAY[@]}" | sed 's/ /\n  /g') # Display defaults from config

Note: Requires GNU find.
EOF
}

# --- Metadata Extraction Function ---
# get_audio_metadata <file_path>
# Outputs: title,artist,album,genre (comma-separated, empty if not found)
# Example: "Song Title,Artist Name,Album Name,Genre Type"
get_audio_metadata() {
  local file="$1"
  local title=""
  local artist=""
  local album=""
  local genre=""
  local metadata_json # For ffprobe JSON output

  # --- Attempt 1: Use ffprobe ---
  # Removed: echo "using ffprobe!"
  metadata_json=$(ffprobe -v quiet -hide_banner -show_format -show_streams -of json "$file" 2>/dev/null)

  # For debugging ffprobe: Uncomment these lines (outputs to stderr, not captured by shell command substitution)
  # echo "DEBUG: ffprobe JSON output for '$file':" >&2
  # echo "$metadata_json" >&2

  if [[ -n "$metadata_json" ]]; then
    if command -v jq &>/dev/null; then
      # Robustly extract tags using jq from ffprobe's JSON
      title=$(echo "$metadata_json" | jq -r '
        .format.tags.title // .streams[0]?.tags?.title //
        .format.tags.TIT2 // .streams[0]?.tags?.TIT2 //
        .format.tags.NAME // .streams[0]?.tags?.NAME //
        .format.tags.TITLE // .streams[0]?.tags?.TITLE //
        .format.tags."Track name" // .streams[0]?.tags?."Track name" // ""
      ')
      artist=$(echo "$metadata_json" | jq -r '
        .format.tags.artist // .streams[0]?.tags?.artist //
        .format.tags.TPE1 // .streams[0]?.tags?.TPE1 //
        .format.tags.TPE2 // .streams[0]?.tags?.TPE2 //
        .format.tags.album_artist // .streams[0]?.tags?.album_artist //
        .format.tags.ARTIST // .streams[0]?.tags?.ARTIST //
        .format.tags.Performer // .streams[0]?.tags?.Performer // ""
      ')
      album=$(echo "$metadata_json" | jq -r '
        .format.tags.album // .streams[0]?.tags?.album //
        .format.tags.TALB // .streams[0]?.tags?.TALB //
        .format.tags.ALBUM // .streams[0]?.tags?.ALBUM // ""
      ')
      genre=$(echo "$metadata_json" | jq -r '
        .format.tags.genre // .streams[0]?.tags?.genre //
        .format.tags.TCON // .streams[0]?.tags?.TCON //
        .format.tags.GENRE // .streams[0]?.tags?.GENRE // ""
      ')
    else
      # Fallback for ffprobe without jq (flat output)
      local metadata_flat
      metadata_flat=$(ffprobe -v quiet -hide_banner -show_format -show_streams \
        -of flat=p=true,nobins,nokv "$file" 2>/dev/null)

      # For debugging ffprobe flat:
      # echo "DEBUG: ffprobe FLAT output for '$file':" >&2
      # echo "$metadata_flat" >&2

      title=$(echo "$metadata_flat" | grep -iE 'tags\.(title|tit2|name|track_name)=' | head -n 1 | cut -d'=' -f2- | sed 's/^"//;s/"$//')
      artist=$(echo "$metadata_flat" | grep -iE 'tags\.(artist|tpe1|tpe2|performer|album_artist)=' | head -n 1 | cut -d'=' -f2- | sed 's/^"//;s/"$//')
      album=$(echo "$metadata_flat" | grep -iE 'tags\.(album|talb)=' | head -n 1 | cut -d'=' -f2- | sed 's/^"//;s/"$//')
      genre=$(echo "$metadata_flat" | grep -iE 'tags\.(genre|tcon)=' | head -n 1 | cut -d'=' -f2- | sed 's/^"//;s/"$//')
    fi
  fi

  # --- Attempt 2: Fallback to mediainfo if ffprobe didn't find title/artist ---
  # Only try mediainfo if both title AND artist are still empty from ffprobe
  if [[ -z "$title" && -z "$artist" ]]; then
    if command -v mediainfo &>/dev/null; then
      # Use mediainfo to get specific fields
      local mediainfo_raw
      # echo "DEBUG: Using mediainfo fallback for '$file' (ffprobe failed to find title/artist)." >&2 # Output to stderr
      mediainfo_raw=$(mediainfo --Inform="General;%Track_Name%|%Performer%" "$file" 2>/dev/null)

      # For debugging mediainfo:
      # echo "DEBUG: mediainfo raw output for '$file':" >&2
      # echo "$mediainfo_raw" >&2

      if [[ -n "$mediainfo_raw" ]]; then
        # Split by pipe '|' which is the default separator for --Inform
        IFS='|' read -r -a mediainfo_tags <<< "$mediainfo_raw"
        title="${mediainfo_tags[0]:-}"
        artist="${mediainfo_tags[1]:-}"
        # mediainfo output confirmed no Album or Genre for this file, so they remain empty
      fi
    fi
  fi

  # Final cleanup for newlines/carriage returns and potential quotes
  title=$(echo "$title" | tr -d '\n\r' | sed 's/^"//;s/"$//')
  artist=$(echo "$artist" | tr -d '\n\r' | sed 's/^"//;s/"$//')
  album=$(echo "$album" | tr -d '\n\r' | sed 's/^"//;s/"$//')
  genre=$(echo "$genre" | tr -d '\n\r' | sed 's/^"//;s/"$//')

  # --- Apply Default Values ---
  # Fallback to filename for title if still empty
  if [[ -z "$title" ]]; then
    title="$(basename "$file" | sed 's/\.[^.]*$//')" # Get filename without extension
  fi

  # Default other empty fields to UNKNOWN
  artist="${artist:-UNKNOWN}"
  album="${album:-UNKNOWN}"
  genre="${genre:-UNKNOWN}"

  # Output as comma-separated string including genre
  echo "${title},${artist},${album},${genre}"
}

# --- Music Library Indexing Function ---
# Builds or rebuilds the entire music index.
# This function will be called initially and potentially for full rebuilds.
build_music_index() {
  local music_dirs=("${MUSIC_DIRS_ARRAY[@]}") # Use the configured music directories
  local ext_filter=("${EXT_FILTER[@]}")       # Use the generated extension filter
  local all_music_files=()
  local tracks_json_array="[]"
  local indexed_dirs_json_array="[]"

  echo "Indexing music library for the first time... This may take a while for large collections."
  echo "Please wait. Monke is working! 🐒"

  # Populate all_music_files and indexed_dirs_json_array
  for dir_path in "${music_dirs[@]}"; do
    if [[ -d "$dir_path" ]]; then
      # Fix for newline: Ensure dir_path is trimmed before passing to jq
      local trimmed_dir_path=$(echo "$dir_path" | tr -d '\n\r')
      local dir_mtime=$(stat -c %Y "$dir_path" 2>/dev/null || echo "")
      local dir_json=$(jq -n --arg path "$trimmed_dir_path" --arg mtime "$dir_mtime" '{path: $path, mtime: $mtime}')
      indexed_dirs_json_array=$(echo "$indexed_dirs_json_array" | jq --argjson new_dir "$dir_json" '. + [$new_dir]')

      # Find files within this specific directory and its subdirectories
      while IFS= read -r -d '' file; do
        all_music_files+=("$file")
      done < <(find "$dir_path" -type f \( "${ext_filter[@]}" \) -print0)
    else
      echo "Warning: Configured music directory '$dir_path' does not exist. Skipping." >&2
    fi
  done


  if [[ ${#all_music_files[@]} -eq 0 ]]; then
    echo "No music files found in configured directories. Index will be empty. 🙊"
    # Even if no tracks, we should save the dir info
    jq -n --argjson dirs "$indexed_dirs_json_array" '{indexed_directories: $dirs, tracks: []}' > "$MUSIC_INDEX_FILE"
    return 0
  fi

  local count=0
  local total=${#all_music_files[@]}

  for file_path in "${all_music_files[@]}"; do
    count=$((count + 1))
    printf "\rIndexing: %d/%d (%s)" "$count" "$total" "$(basename "$file_path")" >&2

    # Get metadata for the current file
    local raw_metadata_output
    raw_metadata_output="$(get_audio_metadata "$file_path")"

    # --- DEBUGGING LINES START HERE ---
    # echo "DEBUG (build_index): Processing file: '$file_path'" >&2
    # echo "DEBUG (build_index): Raw metadata function output: '$raw_metadata_output'" >&2
    # --- DEBUGGING LINES END HERE ---

    # Split metadata string (title,artist,album,genre)
    IFS=',' read -r -a metadata_array <<< "$raw_metadata_output"

    local title="${metadata_array[0]}"
    local artist="${metadata_array[1]}"
    local album="${metadata_array[2]}"
    local genre="${metadata_array[3]}"

    local mtime=$(stat -c %Y "$file_path" 2>/dev/null || echo "")
    local size=$(stat -c %s "$file_path" 2>/dev/null || echo "")

    # Fix for newline: Ensure file_path is trimmed before escaping for JSON
    local trimmed_file_path=$(echo "$file_path" | tr -d '\n\r')
    local escaped_path=$(echo "$trimmed_file_path" | jq -sRr @json)

    local track_json
    track_json=$(jq -n \
      --arg path "$trimmed_file_path" \
      --arg title "$title" \
      --arg artist "$artist" \
      --arg album "$album" \
      --arg genre "$genre" \
      --arg mtime "$mtime" \
      --arg size "$size" \
      '{path: $path, title: $title, artist: $artist, album: $album, genre: $genre, mtime: $mtime, size: $size}')

    tracks_json_array=$(echo "$tracks_json_array" | jq --argjson new_track "$track_json" '. + [$new_track]')

    # check for jq error just in case
    if [[ $? -ne 0 ]]; then
      echo -e "\nError: jq failed to append metadata for $file_path. Skipping. Index may be incomplete." >&2
      # might add better error handling, like logging or writing partial index in future
      return 1
    fi

  done
  printf "\rIndexing complete: %d/%d files processed. 🎉\n" "$total" "$total" >&2

  # Write the final JSON object with both directories and tracks arrays
  echo "{\"indexed_directories\": $(echo "$indexed_dirs_json_array" | jq -c .), \"tracks\": $(echo "$tracks_json_array" | jq -c .)}" | jq . > "$MUSIC_INDEX_FILE"
  echo "Index saved to $MUSIC_INDEX_FILE"
}

# --- Music Library Update Function ---
# Updates the music index by checking for new, removed, or modified files.
update_music_index() {
  local music_dirs=("${MUSIC_DIRS_ARRAY[@]}")
  local ext_filter=("${EXT_FILTER[@]}")
  local current_files_on_disk=() # To store paths of all currently found files
  local new_index_array="[]"    # The JSON array for the updated index
  declare -A old_index_map      # Associative array: path -> full JSON object of the track
  local old_index_json_string   # To hold the raw JSON from the file

  echo "Updating music library index. Monke smart! 🧠"

  # 1. Load existing index into a map for fast lookups
  if [[ -f "$MUSIC_INDEX_FILE" ]]; then
    old_index_json_string=$(cat "$MUSIC_INDEX_FILE")
    # Check if the file contains valid JSON and has the expected top-level 'tracks' key as an array
    if ! echo "$old_index_json_string" | jq -e '.tracks | arrays' &>/dev/null; then
        echo "Warning: Index file '$MUSIC_INDEX_FILE' is invalid or missing/corrupted 'tracks' array. Rebuilding index." >&2
        build_music_index # Rebuild from scratch if corrupt
        return 0 # Exit update as rebuild handled it
    fi

    # Populate old_index_map: Key = path, Value = full JSON object of the track
    # Use process substitution to populate array in current shell
    while IFS=$'\t' read -r path json_obj; do
        old_index_map["$(echo "$path" | tr -d '\n\r')"]="$json_obj" # FIX: Trim path when adding to map
    done < <(echo "$old_index_json_string" | jq -c '.tracks[] | "\(.path)\t\(.)"')
  else
    echo "Index file not found. Building index for the first time."
    build_music_index # If no index exists, build it
    return 0 # Exit update as build handled it
  fi

  # 2. Scan current filesystem and build the new index based on comparison
  # Find all eligible music files on disk
  for dir_path in "${music_dirs[@]}";
    do # Iterate through each config dir
    if [[ -d "$dir_path" ]]; then
      while IFS= read -r -d '' file; do
        current_files_on_disk+=("$file")
      done < <(find "$dir_path" -type f \( "${ext_filter[@]}" \) -print0)
    fi
  done

  local count=0
  local total=${#current_files_on_disk[@]}

  if [[ ${#current_files_on_disk[@]} -eq 0 ]]; then
    echo "No music files found on disk during update scan. Index will be empty. 🙊" >&2
    # Ensure index is written with correct empty structure
    local current_indexed_dirs=$(echo "$old_index_json_string" | jq -c '.indexed_directories // []') # Get dirs from old index, or empty array
    echo "{\"indexed_directories\": $(echo "$current_indexed_dirs" | jq -c .), \"tracks\": []}" | jq . > "$MUSIC_INDEX_FILE"
    return 0
  fi



  for file_path in "${current_files_on_disk[@]}"; do
    count=$((count + 1))
    printf "\rScanning and updating: %d/%d (%s)" "$count" "$total" "$(basename "$file_path")" >&2

    local current_mtime=$(stat -c %Y "$file_path" 2>/dev/null || echo "")
    local current_size=$(stat -c %s "$file_path" 2>/dev/null || echo "")

    local track_json_to_add # Holds the JSON for the current track to be added to new_index_array

    # Check if file existed in old index and is unchanged
    local trimmed_file_path=$(echo "$file_path" | tr -d '\n\r') # FIX: Trim file_path for map lookup
    if [[ -n "${old_index_map[$trimmed_file_path]+x}" ]]; then # Check if key exists in map using trimmed path
      local old_track_json="${old_index_map[$trimmed_file_path]}" # Retrieve using trimmed path
      local old_mtime=$(echo "$old_track_json" | jq -r '.mtime // ""')
      local old_size=$(echo "$old_track_json" | jq -r '.size // ""')

      if [[ "$current_mtime" == "$old_mtime" && "$current_size" == "$old_size" ]]; then
        # File is unchanged, use its old JSON directly
        track_json_to_add="$old_track_json"
      else
        # File modified, re-read metadata
        echo -e "\n  (Modified: $(basename "$file_path"))" >&2 # Debug message
        local raw_metadata_output=$(get_audio_metadata "$file_path")
        IFS=',' read -r -a metadata_array <<< "$raw_metadata_output"

        local title="${metadata_array[0]}"
        local artist="${metadata_array[1]}"
        local album="${metadata_array[2]}"
        local genre="${metadata_array[3]}"

        track_json_to_add=$(jq -n \
          --arg path "$trimmed_file_path" \
          --arg title "$title" \
          --arg artist "$artist" \
          --arg album "$album" \
          --arg genre "$genre" \
          --arg mtime "$current_mtime" \
          --arg size "$current_size" \
          '{path: $path, title: $title, artist: $artist, album: $album, genre: $genre, mtime: $mtime, size: $size}')
      fi
    else
      # File is new, read metadata
      # echo -e "\n  (New: $(basename "$file_path"))" >&2 # Debug message
      local raw_metadata_output=$(get_audio_metadata "$file_path")
      IFS=',' read -r -a metadata_array <<< "$raw_metadata_output"

      local title="${metadata_array[0]}"
      local artist="${metadata_array[1]}"
      local album="${metadata_array[2]}"
      local genre="${metadata_array[3]}"

      track_json_to_add=$(jq -n \
        --arg path "$trimmed_file_path" \
        --arg title "$title" \
        --arg artist "$artist" \
        --arg album "$album" \
        --arg genre "$genre" \
        --arg mtime "$current_mtime" \
        --arg size "$current_size" \
        '{path: $path, title: $title, artist: $artist, album: $album, genre: $genre, mtime: $mtime, size: $size}')
    fi

    # Append the track JSON object to the new JSON array
    if [[ -n "$track_json_to_add" ]]; then
      new_index_array=$(echo "$new_index_array" | jq --argjson new_track "$track_json_to_add" '. + [$new_track]')
      if [[ $? -ne 0 ]]; then
        echo -e "\nError: jq failed to append track $file_path. Index may be corrupted." >&2
        return 1 # Indicate failure
      fi
    fi

  done
  printf "\rScanning and updating complete: %d/%d files processed. 🎉\n" "$total" "$total" >&2


  # 3. Write the final new index, including updated indexed_directories.
  # Get the CURRENT directory mtimes for the new index
  local current_indexed_dirs_json_array="[]"
  for dir_path in "${music_dirs[@]}"; do
    if [[ -d "$dir_path" ]]; then
      local trimmed_dir_path=$(echo "$dir_path" | tr -d '\n\r') # FIX: Trim dir_path before adding to JSON
      local dir_mtime=$(stat -c %Y "$dir_path" 2>/dev/null || echo "")
      local dir_json=$(jq -n --arg path "$trimmed_dir_path" --arg mtime "$dir_mtime" '{path: $path, mtime: $mtime}')
      current_indexed_dirs_json_array=$(echo "$current_indexed_dirs_json_array" | jq --argjson new_dir "$dir_json" '. + [$new_dir]')
    fi
  done

  echo "{\"indexed_directories\": $(echo "$current_indexed_dirs_json_array" | jq -c .), \"tracks\": $(echo "$new_index_array" | jq -c .)}" | jq . > "$MUSIC_INDEX_FILE"
  echo "Index updated and saved to $MUSIC_INDEX_FILE"
}


# --- Global Variables (Initial values) ---
VIDEO_OK=false
CUSTOM_EXTS=""
MPV_ARGS=()
VERSION="0.6.1"
DIRECT_PLAY_TARGET="" # Will store the file path or URL if provided
CUSTOM_MUSIC_DIR="" # Will store a custom music directory if provided

# --- Argument Parsing ---
# Iterate through all arguments to identify direct play target, script options, or mpv flags
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      show_help
      exit 0
      ;;
    -v|--version)
      echo "mpv-music v$VERSION"
      exit 0
      ;;
    --video-ok)
      VIDEO_OK=true
      shift
      ;;
    --ext=*)
      CUSTOM_EXTS="${1#--ext=}"
      shift
      ;;
    --refresh-index) # New: Force smart update
      # Build EXT_FILTER here as it's needed by update_music_index
      EXT_FILTER=()
      CURRENT_EXTS=()
      if [[ -n "$CUSTOM_EXTS" ]]; then
        IFS=',' read -ra CURRENT_EXTS <<< "$CUSTOM_EXTS"
      elif [[ "$VIDEO_OK" == true ]]; then
        CURRENT_EXTS=("${AUDIO_EXTS_ARRAY[@]}" "${VIDEO_EXTS_ARRAY[@]}")
      else
        CURRENT_EXTS=("${AUDIO_EXTS_ARRAY[@]}")
      fi
      for i in "${!CURRENT_EXTS[@]}"; do
        EXT_FILTER+=( -iname "*.${CURRENT_EXTS[$i]}" )
        if [[ $((i+1)) -lt ${#CURRENT_EXTS[@]} ]]; then
          EXT_FILTER+=( -o )
        fi
      done
      # End EXT_FILTER build for this specific case

      update_music_index
      exit 0 # Exit after forced update
      ;;
    --reindex) # New: Force rebuild
      # Build EXT_FILTER here as it's needed by build_music_index
      EXT_FILTER=()
      CURRENT_EXTS=()
      if [[ -n "$CUSTOM_EXTS" ]]; then
        IFS=',' read -ra CURRENT_EXTS <<< "$CUSTOM_EXTS"
      elif [[ "$VIDEO_OK" == true ]]; then
        CURRENT_EXTS=("${AUDIO_EXTS_ARRAY[@]}" "${VIDEO_EXTS_ARRAY[@]}")
      else
        CURRENT_EXTS=("${AUDIO_EXTS_ARRAY[@]}")
      fi
      for i in "${!CURRENT_EXTS[@]}"; do
        EXT_FILTER+=( -iname "*.${CURRENT_EXTS[$i]}" )
        if [[ $((i+1)) -lt ${#CURRENT_EXTS[@]} ]]; then
          EXT_FILTER+=( -o )
        fi
      done
      # End EXT_FILTER build for this specific case

      echo "Forcing a complete rebuild of the music index."
      build_music_index
      exit 0 # Exit after forced rebuild
      ;;
    *)
      if [[ -z "$DIRECT_PLAY_TARGET" && -z "$CUSTOM_MUSIC_DIR" ]]; then
        # Check if it's a URL
        if [[ "$1" =~ ^https?://|^ftp://|^file://|^yt-dlp:// ]]; then
          DIRECT_PLAY_TARGET="$1"
          shift
          continue # Move to next arg to collect potential MPV flags for the URL
        # Check if it's an existing file
        elif [[ -f "$1" ]]; then
          DIRECT_PLAY_TARGET="$1"
          shift
          continue # Move to next arg to collect potential MPV flags for the file
        # Check if it's an existing directory (custom music dir)
        elif [[ -d "$1" ]]; then
          CUSTOM_MUSIC_DIR="$1"
          shift
          continue # Move to next arg to collect potential MPV flags for the interactive mode
        fi
      fi
      MPV_ARGS+=("$1")
      shift
      ;;
  esac
done

# If no MPV arguments were passed on the command line, use the defaults from config
if [[ ${#MPV_ARGS[@]} -eq 0 ]]; then
  MPV_ARGS=("${MPV_DEFAULT_ARGS_ARRAY[@]}")
fi

# --- Execute Direct Play if target was found ---
if [[ -n "$DIRECT_PLAY_TARGET" ]]; then
  echo "▶️ Playing: $DIRECT_PLAY_TARGET"
  mpv "${MPV_ARGS[@]}" "$DIRECT_PLAY_TARGET"
  exit 0
fi

# --- Music Library Indexing Check ---
# Build EXT_FILTER here as it's needed by both build_music_index and update_music_index.
# Moved EXT_FILTER building here to ensure it's always available before indexing calls.
EXT_FILTER=()
CURRENT_EXTS=()

if [[ -n "$CUSTOM_EXTS" ]]; then
  IFS=',' read -ra CURRENT_EXTS <<< "$CUSTOM_EXTS"
elif [[ "$VIDEO_OK" == true ]]; then
  CURRENT_EXTS=("${AUDIO_EXTS_ARRAY[@]}" "${VIDEO_EXTS_ARRAY[@]}")
else
  CURRENT_EXTS=("${AUDIO_EXTS_ARRAY[@]}")
fi

for i in "${!CURRENT_EXTS[@]}"; do
  EXT_FILTER+=( -iname "*.${CURRENT_EXTS[$i]}" )
  if [[ $((i+1)) -lt ${#CURRENT_EXTS[@]} ]]; then
    EXT_FILTER+=( -o )
  fi
done
# EXT_FILTER is now always built here.

# Check if the index file exists, if not, build it.
if [[ ! -f "$MUSIC_INDEX_FILE" ]]; then
  echo "Index file '$MUSIC_INDEX_FILE' not found. Building index from scratch."
  build_music_index # Build from scratch
fi

# --- Determine effective MUSIC_DIRS for interactive mode ---
EFFECTIVE_MUSIC_DIRS=("${MUSIC_DIRS_ARRAY[@]}")
if [[ -n "$CUSTOM_MUSIC_DIR" ]]; then # If a custom directory was provided via command line
  EFFECTIVE_MUSIC_DIRS=("$CUSTOM_MUSIC_DIR")
fi

# --- Interactive Mode Selection ---
echo "🎧 Pick mode:"
echo "1) Play entire folder(s) (album mode)"
echo "2) Pick individual tracks"
read -rp "Enter choice [1/2]: " MODE

if [[ "$MODE" == "1" ]]; then
  # Folder mode - simplified to avoid ANSI color issues
  # Store full paths in a temporary file with display format
  temp_folder_list=$(mktemp)
  find "${EFFECTIVE_MUSIC_DIRS[@]}" -type d | sort | while read -r dir_path; do
    # Get just the basename for display
    dir_name=$(basename "$dir_path")
    # Handle empty dir names (root directories)
    if [[ -z "$dir_name" || "$dir_name" == "/" ]]; then
      dir_name="[ROOT]"
    fi
    echo "$dir_name|$dir_path" >> "$temp_folder_list"
  done

  # Use fzf with the prepared list
  SELECTED=$(cat "$temp_folder_list" | fzf --multi --with-nth=1 --delimiter="|" --prompt="📁 Pick folder(s): " | cut -d'|' -f2) || {
    rm -f "$temp_folder_list"
    echo "No folders picked. Monke confused. 🙃"
    exit 1
  }

  # Clean up
  rm -f "$temp_folder_list"

  mapfile -t FOLDERS <<< "$SELECTED"
  echo "📦 Selected ${#FOLDERS[@]} folder(s)."

  FILES=()
  for DIR in "${FOLDERS[@]}"; do
    # Debug output
    echo "Searching in: $DIR"
    while IFS= read -r -d '' FILE; do
      FILES+=("$FILE")
    done < <(find "$DIR" -type f \( "${EXT_FILTER[@]}" \) -print0)
  done

  [[ ${#FILES[@]} -eq 0 ]] && echo "No music found in those folders. Monke hear nothing 🙊" && exit 1
  echo "🎶 Found ${#FILES[@]} file(s) total."
  mpv "${MPV_ARGS[@]}" "${FILES[@]}"

  elif [[ "$MODE" == "2" ]]; then
    # Check if index file exists
    if [[ ! -f "$MUSIC_INDEX_FILE" ]]; then
      echo "No index file found. Please run with --reindex or --refresh-index first."
      exit 1
    fi

    # Create a formatted display for tracks from the index
    temp_track_list=$(mktemp)

    # Format for display - using concatenation for display, but keeping original fields separate for preview
    jq -r '.tracks[] | (.title // "[NO TITLE]") + "|" +
           (.title // "[NO TITLE]") + "|" +
           (.artist // "[NO ARTIST]") + "|" +
           (.album // "[NO ALBUM]") + "|" +
           (.genre // "[NO GENRE]") + "|" +
           .path' "$MUSIC_INDEX_FILE" > "$temp_track_list"

    # Use a simpler preview that directly shows the fields from the jq output
    SELECTED=$(cat "$temp_track_list" | fzf --multi \
      --prompt="🎵 Pick your tracks: " \
      --delimiter="|" \
      --with-nth=1 \
      --preview='echo -e "\033[1;36mTitle:\033[0m {2}\n\033[1;33mArtist:\033[0m {3}\n\033[1;32mAlbum:\033[0m {4}\n\033[1;35mGenre:\033[0m {5}"' \
      --preview-window=top:4 | awk -F'|' '{print $NF}')

    # Clean up temp file
    rm -f "$temp_track_list"

    # Create array of selected files
    mapfile -t FILES <<< "$SELECTED"

    [[ ${#FILES[@]} -eq 0 ]] && echo "No tracks picked. Monke walk away. 🚶" && exit 1
    echo "🎶 Selected ${#FILES[@]} track(s)."
    mpv "${MPV_ARGS[@]}" "${FILES[@]}"

else
  echo "Invalid input. Monke smash keyboard in confusion 🍌💥"
  exit 1
fi
