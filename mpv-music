#!/usr/bin/env bash
# Purpose: MPV wrapper for music playback
set -euo pipefail

# --- Configuration ---
CONFIG_DIR="$HOME/.config/mpv-music"
CONFIG_FILE="$CONFIG_DIR/mpv-music.conf"
MUSIC_INDEX_FILE="$CONFIG_DIR/music_index.json"
LOG_FILE="$CONFIG_DIR/mpv-music.log"

# Default values (will be overridden by config file if it exists)
MUSIC_DIRS_DEFAULT=("$HOME/Music")
MPV_ARGS_DEFAULT=(--loop-playlist=inf --shuffle --no-video)
AUDIO_EXTS_DEFAULT="mp3 flac wav m4a aac ogg opus wma alac aiff amr"
VIDEO_EXTS_DEFAULT="mp4 mkv webm avi mov flv wmv mpeg mpg 3gp ts vob m4v"
PLAYLIST_EXTS_DEFAULT="m3u m3u8 pls"

# Ensure config directory exists
mkdir -p "$CONFIG_DIR"

# --- Log Management ---
rotate_log() {
  # Only rotate the log if BOTH flags are enabled
  if [[ "$VERBOSE" == true && "$DEBUG" == true ]]; then
    local max_size_kb=1024 # 1MB
    if [[ -f "$LOG_FILE" ]]; then
      local current_size_kb
      current_size_kb=$(du -k "$LOG_FILE" | cut -f1)
      if [[ "$current_size_kb" -gt "$max_size_kb" ]]; then
        mv "$LOG_FILE" "${LOG_FILE}.old"
        # Use log_debug so this message also gets logged
        log_debug "Log file rotated. Old log is at ${LOG_FILE}.old"
      fi
    fi
  fi
}
# --- Verbose and Debug Mode ---
VERBOSE=false
DEBUG=false

# Helper function for verbose logging
log_verbose() {
    # This outer 'if' ensures the message is printed to the screen if --verbose is on
    if [[ "$VERBOSE" == true ]]; then
        local message="[VERBOSE] $@"
        # This inner 'if' checks if we should ALSO write to the log file
        if [[ "$DEBUG" == true ]]; then
            echo -e "$message" | tee -a "$LOG_FILE" >&2
        else
            echo -e "$message" >&2
        fi
    fi
}

# Helper function for debug logging
log_debug() {
    # This outer 'if' ensures the message is printed to the screen if --debug is on
    if [[ "$DEBUG" == true ]]; then
        local message="[DEBUG] $@"
        # This inner 'if' checks if we should ALSO write to the log file
        if [[ "$VERBOSE" == true ]]; then
            echo -e "$message" | tee -a "$LOG_FILE" >&2
        else
            echo -e "$message" >&2
        fi
    fi
}

# --- Temporary File Management ---
# Array to store all temporary files
declare -a TEMP_FILES=()

# Function to create a temporary file and track it for cleanup
create_temp_file() {
  local -n out_var=$1
  out_var=$(mktemp)
  TEMP_FILES+=("$out_var")
}

# Function to clean up all temporary files
cleanup_temp_files() {
  log_debug "\n--- Cleanup triggered ---"
  if [[ ${#TEMP_FILES[@]} -gt 0 ]]; then
    log_debug "Cleaning up ${#TEMP_FILES[@]} temporary files..."
    for tmp_file in "${TEMP_FILES[@]}"; do
      if [[ -f "$tmp_file" ]]; then
        log_debug "Removing: $tmp_file" >&2
        rm -f "$tmp_file"
        # Verify removal
        [[ ! -f "$tmp_file" ]] && log_debug "‚úì Successfully removed" || log_debug "‚ùå Failed to remove"
      else
        log_debug "File already gone: $tmp_file"
      fi
    done
    log_debug "--- Cleanup complete ---"
  else
      log_debug "No temporary files to clean up"
  fi
}
# Set up comprehensive trap for all common termination signals
trap cleanup_temp_files EXIT HUP INT TERM QUIT

# --- Create Config Function ---
# Creates the configuration file for mpv-music.
create_config() {
    cat <<EOF > "$CONFIG_FILE"
# mpv-music configuration file

# Default music directories (space-separated)
# You can add multiple paths, e.g., MUSIC_DIRS="\$HOME/Music /mnt/my_music_drive/audio"
MUSIC_DIRS="${MUSIC_DIRS_DEFAULT[*]}"

# Default MPV arguments (space-separated)
# These will be used if no other MPV args are passed on the command line.
# Example: MPV_DEFAULT_ARGS="--loop-playlist=inf --shuffle --no-video --volume=50"
MPV_DEFAULT_ARGS="${MPV_ARGS_DEFAULT[*]}"

# Audio extensions (space-separated)
# These are used when --video-ok is NOT specified.
AUDIO_EXTS="$AUDIO_EXTS_DEFAULT"

# Video extensions (space-separated)
# These are added to AUDIO_EXTS when --video-ok IS specified.
VIDEO_EXTS="$VIDEO_EXTS_DEFAULT"

# Playlist extensions (space-separated)
PLAYLIST_EXTS="$PLAYLIST_EXTS_DEFAULT"
EOF
    log_verbose "Created default config file at $CONFIG_FILE"
}

# Check if config file exists, if not, create a default one
if [[ ! -f "$CONFIG_FILE" ]]; then
    create_config
fi

# Source the configuration file
# This will set the variables like MUSIC_DIRS, MPV_DEFAULT_ARGS, etc.
# shellcheck source=/dev/null
. "$CONFIG_FILE"

# Convert space-separated strings from config into arrays
IFS=' ' read -ra MUSIC_DIRS_ARRAY <<< "$MUSIC_DIRS"
IFS=' ' read -ra MPV_DEFAULT_ARGS_ARRAY <<< "$MPV_DEFAULT_ARGS"
IFS=' ' read -ra AUDIO_EXTS_ARRAY <<< "$AUDIO_EXTS"
IFS=' ' read -ra VIDEO_EXTS_ARRAY <<< "$VIDEO_EXTS"
IFS=' ' read -ra PLAYLIST_EXTS_ARRAY <<< "$PLAYLIST_EXTS"


# --- Dependency Checks ---
if ! command -v mpv &>/dev/null || ! command -v fzf &>/dev/null; then
  echo "Missing dependencies. mpv-music requires:"
  echo "- mpv: media player (https://mpv.io)"
  echo "- fzf: fuzzy finder (https://github.com/junegunn/fzf)"
  echo "Install them and try again."
  exit 1
fi

if ! command -v yt-dlp &>/dev/null; then
  echo "Warning: yt-dlp not found. URL playback might be limited."
  echo "Install yt-dlp (https://github.com/yt-dlp/yt-dlp/) for full URL support."
  # no exit here, cuz local file/folder playback
fi

if ! command -v ffprobe &>/dev/null; then
  echo "Error: ffprobe not found. Metadata features will be unavailable."
  echo "ffprobe is part of the FFmpeg suite. Install FFmpeg (https://ffmpeg.org/download.html) and try again."
  exit 1 # cuz metadata is a core feature
fi

if ! command -v jq &>/dev/null; then
  echo "Error: jq not found. Metadata indexing and advanced features will be unavailable."
  echo "Install jq (e.g., sudo apt install jq or brew install jq) for full functionality."
  exit 1 # index file is json, so need jq for parsing metadata
fi

if ! command -v mediainfo &>/dev/null; then
  echo "Warning: mediainfo not found. Metadata extraction for some files (e.g., certain Opus) might be limited."
  echo "Install mediainfo (e.g., sudo apt install mediainfo or brew install mediainfo)."
fi

if ! command -v find &>/dev/null || ! find --version 2>&1 | grep -q 'GNU findutils'; then
  echo "Error: GNU find is required. Your system might be using BSD find."
  echo "Please install GNU findutils!"
  exit 1
fi

# --- Helper Functions (Defined before main execution logic) ---

# --- Help Function ---
show_help() {
  cat <<EOF
ü¶ç MPV Music Script ‚Äì Monke Wrapper üçå (v$VERSION)

Usage:
  mpv-music [PATH_OR_URL_OR_DIR] [OPTIONS]

Examples:
  mpv-music                       # Uses directories from config with default mpv flags
  mpv-music /path/to/music        # Uses custom folder with default mpv flags
  mpv-music ~/Music/song.mp3      # Plays a specific local file directly
  mpv-music https://maybeaurl/file # Plays a file from URL directly (requires yt-dlp)
  mpv-music --no-video --volume=20 # Uses config directories with custom flags
  mpv-music /path/to/music --no-video # Custom folder + custom flags

Options:
  -h, --help        Show this help message and exit
  -v, --version     Show version and exit
  --config          Open config file in text editor (defaults to nano, falls back to vi)
  --config=EDITOR   Open config file in specified editor (e.g., --config=vim)
  --video-ok        Include video file formats (defined in config)
  --ext=EXT1,EXT2   Use only specified extensions (comma-separated, overrides config)
  --refresh-index   Force a smart update of the music index (checks file changes).
  --reindex         Force a complete rebuild of the music index (resets everything).
  -V, --verbose     Increase verbosity level
  --debug           Print debug messages
                    (When both --verbose and --debug are enabled, logs are saved to
                    $HOME/.config/mpv-music/mpv-music.log)

Interactive Modes:
  1) Album mode: Pick entire folders
  2) Track mode: Pick individual files
  3) Playlist mode: Pick and play saved playlists
  Tip: You can press TAB to select multiple items.

MPV default flags (if none passed via command line):
  $(echo "${MPV_DEFAULT_ARGS_ARRAY[@]}" | sed 's/ /\n  /g') # Display defaults from config

Note: Requires GNU find.
EOF
}

# --- Build Extension Filter Function ---
# Builds the 'find' extension filter based on script settings
build_ext_filter() {
  local current_exts=()
  if [[ -n "$CUSTOM_EXTS" ]]; then
    IFS=',' read -ra current_exts <<< "$CUSTOM_EXTS"
  elif [[ "$VIDEO_OK" == true ]]; then
    current_exts=("${AUDIO_EXTS_ARRAY[@]}" "${VIDEO_EXTS_ARRAY[@]}")
  else
    current_exts=("${AUDIO_EXTS_ARRAY[@]}")
  fi

  # Clear the global EXT_FILTER before rebuilding
  EXT_FILTER=()
  for i in "${!current_exts[@]}"; do
    EXT_FILTER+=( -iname "*.${current_exts[$i]}" )
    if [[ $((i+1)) -lt ${#current_exts[@]} ]]; then
      EXT_FILTER+=( -o )
    fi
  done
}

# --- Metadata Extraction Function ---
# get_audio_metadata <file_path>
# Outputs: title,artist,album,genre (comma-separated, empty if not found)
# Example: "Song Title,Artist Name,Album Name,Genre Type"
get_audio_metadata() {
  local file="$1"
  local title=""
  local artist=""
  local album=""
  local genre=""
  local metadata_json

  # --- Attempt 1: Use ffprobe ---
  log_debug "using ffprobe!"
  metadata_json=$(ffprobe -v quiet -hide_banner -show_format -show_streams -of json "$file" 2>/dev/null)

  log_debug "ffprobe JSON output for '$file':"
  log_debug "$metadata_json"

  if [[ -n "$metadata_json" ]]; then
    # OPTIMIZATION: Extract all tags at once with a single jq call.
    # The output is tab-separated (@tsv), which is safer for parsing.
    local metadata_line
    metadata_line=$(echo "$metadata_json" | jq -r '
      [
        .format.tags.title // .streams[0]?.tags?.title // .format.tags.TIT2 // .streams[0]?.tags?.TIT2 // .format.tags.NAME // .streams[0]?.tags?.NAME // .format.tags.TITLE // .streams[0]?.tags?.TITLE // .format.tags."Track name" // .streams[0]?.tags?."Track name" // "",
        .format.tags.artist // .streams[0]?.tags?.artist // .format.tags.TPE1 // .streams[0]?.tags?.TPE1 // .format.tags.TPE2 // .streams[0]?.tags?.TPE2 // .format.tags.album_artist // .streams[0]?.tags?.album_artist // .format.tags.ARTIST // .streams[0]?.tags?.ARTIST // .format.tags.Performer // .streams[0]?.tags?.Performer // "",
        .format.tags.album // .streams[0]?.tags?.album // .format.tags.TALB // .streams[0]?.tags?.TALB // .format.tags.ALBUM // .streams[0]?.tags?.ALBUM // "",
        .format.tags.genre // .streams[0]?.tags?.genre // .format.tags.TCON // .streams[0]?.tags?.TCON // .format.tags.GENRE // .streams[0]?.tags?.GENRE // ""
      ] | @tsv
    ')

    # Read the tab-separated output from jq directly into variables.
    IFS=$'\t' read -r title artist album genre <<< "$metadata_line"
  fi

  # --- Attempt 2: Fallback to mediainfo if ffprobe didn't find title/artist ---
  # Only try mediainfo if both title AND artist are still empty from ffprobe
  if [[ -z "$title" && -z "$artist" ]]; then
    if command -v mediainfo &>/dev/null; then
      # Use mediainfo to get specific fields
      local mediainfo_raw
      log_debug "Using mediainfo fallback for '$file' (ffprobe failed to find title/artist)."
      mediainfo_raw=$(mediainfo --Inform="General;%Track_Name%|%Performer%" "$file" 2>/dev/null)

      log_debug "mediainfo raw output for '$file':"
      log_debug "$mediainfo_raw"

      if [[ -n "$mediainfo_raw" ]]; then
        # Split by pipe '|' which is the default separator for --Inform
        IFS='|' read -r title artist <<< "$mediainfo_raw"
      fi
    fi
  fi

  # Final cleanup for newlines/carriage returns and potential quotes
  title=$(echo "$title" | tr -d '\n\r' | sed 's/^"//;s/"$//')
  artist=$(echo "$artist" | tr -d '\n\r' | sed 's/^"//;s/"$//')
  album=$(echo "$album" | tr -d '\n\r' | sed 's/^"//;s/"$//')
  genre=$(echo "$genre" | tr -d '\n\r' | sed 's/^"//;s/"$//')

  # --- Apply Default Values ---
  # Fallback to filename for title if still empty
  if [[ -z "$title" ]]; then
    title="$(basename "$file" | sed 's/\.[^.]*$//')" # Get filename without extension
  fi

  # Default other empty fields to UNKNOWN
  artist="${artist:-UNKNOWN}"
  album="${album:-UNKNOWN}"
  genre="${genre:-UNKNOWN}"

  # Output as comma-separated string to maintain compatibility
  echo "${title},${artist},${album},${genre}"
}

# --- Temporary Index Build Function ---
# Builds a temporary index for a given directory.
# Arguments: $1 = directory path, $2 = reference to variable to store temp index file path
build_temp_index() {
    local custom_dir="$1"
    local -n temp_index_ref=$2 # Use nameref for the output variable
    local ext_filter=("${EXT_FILTER[@]}")
    local temp_files_list
    local tracks_json="[]"

    log_verbose "Temporarily indexing files from '$custom_dir' for selection..."

    create_temp_file temp_index_ref
    create_temp_file temp_files_list

    find "$custom_dir" -type f \( "${ext_filter[@]}" \) -print0 | while IFS= read -r -d '' file; do
        echo "$file"
    done > "$temp_files_list"

    local file_count
    file_count=$(wc -l < "$temp_files_list")

    if [[ $file_count -eq 0 ]]; then
        echo "No music files found in '$custom_dir'. Monke sad. üôä" >&2
        # rm -f "$temp_files_list" "$temp_index_ref"
        # Create an empty index so downstream commands don't fail
        echo '{"tracks": []}' > "$temp_index_ref"
        return 1
    fi

    log_verbose "Found $file_count files. Processing metadata..."
    local count=0

    while IFS= read -r file_path; do
        count=$((count + 1))
        printf "\rIndexing: %d/%d (%s)" "$count" "$file_count" "$(basename "$file_path")" >&2

        local raw_metadata_output
        raw_metadata_output=$(get_audio_metadata "$file_path")
        IFS=',' read -r -a metadata_array <<< "$raw_metadata_output"

        local title="${metadata_array[0]}"
        local artist="${metadata_array[1]}"
        local album="${metadata_array[2]}"
        local genre="${metadata_array[3]}"

        local file_ext="${file_path##*.}"
        file_ext="${file_ext,,}"
        local media_type="UNKNOWN"
        if [[ " ${AUDIO_EXTS_ARRAY[*]} " =~ " ${file_ext} " ]]; then
            media_type="audio"
        elif [[ " ${VIDEO_EXTS_ARRAY[*]} " =~ " ${file_ext} " ]]; then
            media_type="video"
        fi

        local track_json
        track_json=$(jq -n \
          --arg path "$file_path" \
          --arg title "$title" \
          --arg artist "$artist" \
          --arg album "$album" \
          --arg genre "$genre" \
          --arg media_type "$media_type" \
          '{path: $path, title: $title, artist: $artist, album: $album, genre: $genre, media_type: $media_type}')

        tracks_json=$(echo "$tracks_json" | jq --argjson new_track "$track_json" '. + [$new_track]')

    done < "$temp_files_list"

    printf "\rProcessing complete: %d/%d files processed.\n" "$count" "$file_count" >&2

    # Create the final index file structure
    echo "{\"tracks\": $tracks_json}" > "$temp_index_ref"
    # rm -f "$temp_files_list"
    log_verbose "Temporary index created at '$temp_index_ref'."
}

# --- Music Library Indexing Function ---
# Builds or rebuilds the entire music index.
# This function will be called initially and potentially for full rebuilds.
build_music_index() {
  local music_dirs=("${MUSIC_DIRS_ARRAY[@]}") # Use the configured music directories
  local ext_filter=("${EXT_FILTER[@]}")       # Use the generated extension filter
  local all_music_files=()
  local indexed_dirs_json_array="[]"

  log_verbose "Indexing music library for the first time... This may take a while for large collections."
  echo "Please wait. Monke is working! üêí"

  # Populate all_music_files and indexed_dirs_json_array
  for dir_path in "${music_dirs[@]}"; do
    if [[ -d "$dir_path" ]]; then
      # Fix for newline: Ensure dir_path is trimmed before passing to jq
      local trimmed_dir_path
      trimmed_dir_path=$(echo "$dir_path" | tr -d '\n\r')
      local dir_mtime
      dir_mtime=$(stat -c %Y "$dir_path" 2>/dev/null || echo "")
      local dir_json
      dir_json=$(jq -n --arg path "$trimmed_dir_path" --arg mtime "$dir_mtime" '{path: $path, mtime: $mtime}')
      indexed_dirs_json_array=$(echo "$indexed_dirs_json_array" | jq --argjson new_dir "$dir_json" '. + [$new_dir]')

      # Find files within this specific directory and its subdirectories
      while IFS= read -r -d '' file; do
        all_music_files+=("$file")
      done < <(find "$dir_path" -type f \( "${ext_filter[@]}" \) -print0)
    else
      log_verbose "Warning: Configured music directory '$dir_path' does not exist. Skipping."
    fi
  done

  if [[ ${#all_music_files[@]} -eq 0 ]]; then
    echo "No music files found in configured directories. Index will be empty. üôä"
    # Even if no tracks, we should save the dir info
    jq -n --argjson dirs "$indexed_dirs_json_array" '{indexed_directories: $dirs, tracks: []}' > "$MUSIC_INDEX_FILE"
    return 0
  fi

  # --- OPTIMIZED INDEXING LOOP ---
  # Create a temporary file to store one JSON object per line
  create_temp_file temp_json_lines

  local count=0
  local total=${#all_music_files[@]}

  for file_path in "${all_music_files[@]}"; do
    count=$((count + 1))
    printf "\rIndexing: %d/%d (%s)" "$count" "$total" "$(basename "$file_path")" >&2

    # Get metadata for the current file
    local raw_metadata_output
    raw_metadata_output="$(get_audio_metadata "$file_path")"

    log_debug "(build_index): Processing file: '$file_path'"
    log_debug "(build_index): Raw metadata function output: '$raw_metadata_output'"


    # Split metadata string (title,artist,album,genre)
    IFS=',' read -r -a metadata_array <<< "$raw_metadata_output"

    local title="${metadata_array[0]}"
    local artist="${metadata_array[1]}"
    local album="${metadata_array[2]}"
    local genre="${metadata_array[3]}"
    local mtime
    mtime=$(stat -c %Y "$file_path" 2>/dev/null || echo "")
    local size
    size=$(stat -c %s "$file_path" 2>/dev/null || echo "")
    local trimmed_file_path
    trimmed_file_path=$(echo "$file_path" | tr -d '\n\r')
    local file_ext="${file_path##*.}"
    file_ext="${file_ext,,}" # Convert to lowercase
    local media_type="UNKNOWN"

    # Check if extension is in audio or video lists
    if [[ " ${AUDIO_EXTS_ARRAY[*]} " =~ " ${file_ext} " ]]; then
      media_type="audio"
    elif [[ " ${VIDEO_EXTS_ARRAY[*]} " =~ " ${file_ext} " ]]; then
      media_type="video"
    fi

    # Append a single, compact JSON line to the temp file for each track
    # The '-c' flag in jq makes the output compact (one line)
    jq -cn \
      --arg path "$trimmed_file_path" \
      --arg title "$title" \
      --arg artist "$artist" \
      --arg album "$album" \
      --arg genre "$genre" \
      --arg mtime "$mtime" \
      --arg size "$size" \
      --arg media_type "$media_type" \
      '{path: $path, title: $title, artist: $artist, album: $album, genre: $genre, mtime: $mtime, size: $size, media_type: $media_type}' >> "$temp_json_lines"

  done

  printf "\rIndexing complete: %d/%d files processed. üéâ\n" "$total" "$total" >&2

  # --- EFFICIENT JSON ASSEMBLY ---
  # Use jq's --slurp flag to read all the JSON lines and wrap them in an array
  local tracks_json_array
  tracks_json_array=$(jq -s '.' "$temp_json_lines")

  # Write the final JSON object in a single, clean command
  jq -n \
    --argjson dirs "$indexed_dirs_json_array" \
    --argjson tracks "$tracks_json_array" \
    '{indexed_directories: $dirs, tracks: $tracks}' > "$MUSIC_INDEX_FILE"

  log_verbose "Index saved to $MUSIC_INDEX_FILE"
}

# --- Music Library Update Function ---
# Updates the music index by checking for new, removed, or modified files.
update_music_index() {
  local music_dirs=("${MUSIC_DIRS_ARRAY[@]}")
  local ext_filter=("${EXT_FILTER[@]}")
  local current_files_on_disk=() # To store paths of all currently found files
  local new_index_array="[]"    # The JSON array for the updated index
  declare -A old_index_map      # Associative array: path -> full JSON object of the track
  local old_index_json_string   # To hold the raw JSON from the file

  echo "Updating music library index. Monke smart! üß†"

  # 1. Load existing index into a map for fast lookups
  if [[ -f "$MUSIC_INDEX_FILE" ]]; then
    old_index_json_string=$(cat "$MUSIC_INDEX_FILE")
    # Check if the file contains valid JSON and has the expected top-level 'tracks' key as an array
    if ! echo "$old_index_json_string" | jq -e '.tracks | arrays' &>/dev/null; then
        echo "Warning: Index file '$MUSIC_INDEX_FILE' is invalid or missing/corrupted 'tracks' array. Rebuilding index." >&2
        build_music_index # Rebuild from scratch if corrupt
        return 0 # Exit update as rebuild handled it
    fi

    # Populate old_index_map: Key = path, Value = full JSON object of the track
    # Use process substitution to populate array in current shell
    while IFS=$'\t' read -r path json_obj; do
        old_index_map["$(echo "$path" | tr -d '\n\r')"]="$json_obj" # FIX: Trim path when adding to map
    done < <(echo "$old_index_json_string" | jq -c '.tracks[] | "\(.path)\t\(.)"')
  else
    echo "Index file not found. Building index for the first time."
    build_music_index # If no index exists, build it
    return 0 # Exit update as build handled it
  fi

  # 2. Scan current filesystem and build the new index based on comparison
  # Find all eligible music files on disk
  for dir_path in "${music_dirs[@]}";
    do # Iterate through each config dir
    if [[ -d "$dir_path" ]]; then
      while IFS= read -r -d '' file; do
        current_files_on_disk+=("$file")
      done < <(find "$dir_path" -type f \( "${ext_filter[@]}" \) -print0)
    fi
  done

  local count=0
  local total=${#current_files_on_disk[@]}

  if [[ ${#current_files_on_disk[@]} -eq 0 ]]; then
    echo "No music files found on disk during update scan. Index will be empty. üôä" >&2
    # Ensure index is written with correct empty structure
    local current_indexed_dirs=$(echo "$old_index_json_string" | jq -c '.indexed_directories // []') # Get dirs from old index, or empty array
    echo "{\"indexed_directories\": $(echo "$current_indexed_dirs" | jq -c .), \"tracks\": []}" | jq . > "$MUSIC_INDEX_FILE"
    return 0
  fi

  for file_path in "${current_files_on_disk[@]}"; do
    count=$((count + 1))
    printf "\rScanning and updating: %d/%d (%s)" "$count" "$total" "$(basename "$file_path")" >&2

    local current_mtime=$(stat -c %Y "$file_path" 2>/dev/null || echo "")
    local current_size=$(stat -c %s "$file_path" 2>/dev/null || echo "")

    local track_json_to_add # Holds the JSON for the current track to be added to new_index_array

    # Check if file existed in old index and is unchanged
    local trimmed_file_path=$(echo "$file_path" | tr -d '\n\r') # FIX: Trim file_path for map lookup
    if [[ -n "${old_index_map[$trimmed_file_path]+x}" ]]; then # Check if key exists in map using trimmed path
      local old_track_json="${old_index_map[$trimmed_file_path]}" # Retrieve using trimmed path
      local old_mtime=$(echo "$old_track_json" | jq -r '.mtime // ""')
      local old_size=$(echo "$old_track_json" | jq -r '.size // ""')

      if [[ "$current_mtime" == "$old_mtime" && "$current_size" == "$old_size" ]]; then
        # File is unchanged, use its old JSON directly
        track_json_to_add="$old_track_json"
      else
        # File modified, re-read metadata
        log_debug "(Modified: $(basename "$file_path"))"
        local raw_metadata_output=$(get_audio_metadata "$file_path")
        IFS=',' read -r -a metadata_array <<< "$raw_metadata_output"

        local title="${metadata_array[0]}"
        local artist="${metadata_array[1]}"
        local album="${metadata_array[2]}"
        local genre="${metadata_array[3]}"

        # Determine media_type for modified file
        local file_ext="${file_path##*.}"
        file_ext="${file_ext,,}"  # Convert to lowercase
        local media_type="UNKNOWN"

        # Check if extension is in audio or video lists
        if [[ " ${AUDIO_EXTS_ARRAY[*]} " =~ " ${file_ext} " ]]; then
          media_type="audio"
        elif [[ " ${VIDEO_EXTS_ARRAY[*]} " =~ " ${file_ext} " ]]; then
          media_type="video"
        fi

        track_json_to_add=$(jq -n \
          --arg path "$trimmed_file_path" \
          --arg title "$title" \
          --arg artist "$artist" \
          --arg album "$album" \
          --arg genre "$genre" \
          --arg mtime "$current_mtime" \
          --arg size "$current_size" \
          --arg media_type "$media_type" \
          '{path: $path, title: $title, artist: $artist, album: $album, genre: $genre, mtime: $mtime, size: $size, media_type: $media_type}')
      fi
    else
      # File is new, read metadata
      log_debug "(New: $(basename "$file_path"))"
      local raw_metadata_output=$(get_audio_metadata "$file_path")
      IFS=',' read -r -a metadata_array <<< "$raw_metadata_output"

      local title="${metadata_array[0]}"
      local artist="${metadata_array[1]}"
      local album="${metadata_array[2]}"
      local genre="${metadata_array[3]}"

      # Determine media_type for new file
      local file_ext="${file_path##*.}"
      file_ext="${file_ext,,}"  # Convert to lowercase
      local media_type="UNKNOWN"

      # Check if extension is in audio or video lists
      if [[ " ${AUDIO_EXTS_ARRAY[*]} " =~ " ${file_ext} " ]]; then
        media_type="audio"
      elif [[ " ${VIDEO_EXTS_ARRAY[*]} " =~ " ${file_ext} " ]]; then
        media_type="video"
      fi

      track_json_to_add=$(jq -n \
        --arg path "$trimmed_file_path" \
        --arg title "$title" \
        --arg artist "$artist" \
        --arg album "$album" \
        --arg genre "$genre" \
        --arg mtime "$current_mtime" \
        --arg size "$current_size" \
        --arg media_type "$media_type" \
        '{path: $path, title: $title, artist: $artist, album: $album, genre: $genre, mtime: $mtime, size: $size, media_type: $media_type}')
    fi

    # Append the track JSON object to the new JSON array
    if [[ -n "$track_json_to_add" ]]; then
      new_index_array=$(echo "$new_index_array" | jq --argjson new_track "$track_json_to_add" '. + [$new_track]')
      if [[ $? -ne 0 ]]; then
        echo -e "\nError: jq failed to append track $file_path. Index may be corrupted." >&2
        return 1 # Indicate failure
      fi
    fi

  done
  printf "\rScanning and updating complete: %d/%d files processed. üéâ\n" "$total" "$total" >&2


  # 3. Write the final new index, including updated indexed_directories.
  # Get the CURRENT directory mtimes for the new index
  local current_indexed_dirs_json_array="[]"
  for dir_path in "${music_dirs[@]}"; do
    if [[ -d "$dir_path" ]]; then
      local trimmed_dir_path=$(echo "$dir_path" | tr -d '\n\r') # FIX: Trim dir_path before adding to JSON
      local dir_mtime=$(stat -c %Y "$dir_path" 2>/dev/null || echo "")
      local dir_json=$(jq -n --arg path "$trimmed_dir_path" --arg mtime "$dir_mtime" '{path: $path, mtime: $mtime}')
      current_indexed_dirs_json_array=$(echo "$current_indexed_dirs_json_array" | jq --argjson new_dir "$dir_json" '. + [$new_dir]')
    fi
  done

  echo "{\"indexed_directories\": $(echo "$current_indexed_dirs_json_array" | jq -c .), \"tracks\": $(echo "$new_index_array" | jq -c .)}" | jq . > "$MUSIC_INDEX_FILE"
  log_verbose "Index updated and saved to $MUSIC_INDEX_FILE"
}


# --- Global Variables (Initial values) ---
VIDEO_OK=false
CUSTOM_EXTS=""
MPV_ARGS=()
VERSION="0.10.0"
DIRECT_PLAY_TARGET="" # Will store the file path or URL if provided
CUSTOM_MUSIC_DIR="" # Will store a custom music directory if provided

# --- Argument Parsing ---
# Iterate through all arguments to identify direct play target, script options, or mpv flags
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      show_help
      exit 0
      ;;
    -v|--version)
      echo "mpv-music v$VERSION"
      exit 0
      ;;
      -V|--verbose)
      VERBOSE=true
      shift
      ;;
      --debug)
      DEBUG=true
      shift
      ;;
    --config|--config=*)
    # If it's "--config=editor", extract the editor
    if [[ "$1" == "--config="* ]]; then
        EDITOR="${1#--config=}"
    else
        # No editor specified, try nano or fall back to vi
        if command -v nano &>/dev/null; then
            EDITOR="nano"
        elif command -v vi &>/dev/null; then
            EDITOR="vi"
        else
            echo "Error: Neither nano nor vi found. Please specify an editor with --config=editor"
            exit 1
        fi
    fi

    # Open the config file with the selected editor
    $EDITOR "$CONFIG_FILE"
    exit 0
    ;;
    --video-ok)
      VIDEO_OK=true
      shift
      ;;
    --ext=*)
      CUSTOM_EXTS="${1#--ext=}"
      shift
      ;;
    --refresh-index) # New: Force smart update
      build_ext_filter
      update_music_index
      exit 0 # Exit after forced update
      ;;
    --reindex) # New: Force rebuild
      # Build EXT_FILTER here as it's needed by build_music_index
      build_ext_filter
      echo "Forcing a complete rebuild of the music index."
      build_music_index
      exit 0 # Exit after forced rebuild
      ;;
    *)
      if [[ -z "$DIRECT_PLAY_TARGET" && -z "$CUSTOM_MUSIC_DIR" ]]; then
        # Check if it's a URL
        if [[ "$1" =~ ^https?://|^ftp://|^file://|^yt-dlp:// ]]; then
          DIRECT_PLAY_TARGET="$1"
          shift
          continue # Move to next arg to collect potential MPV flags for the URL
        # Check if it's an existing file
        elif [[ -f "$1" ]]; then
          DIRECT_PLAY_TARGET="$1"
          shift
          continue # Move to next arg to collect potential MPV flags for the file
        # Check if it's an existing directory (custom music dir)
        elif [[ -d "$1" ]]; then
          CUSTOM_MUSIC_DIR="$1"
          shift
          continue # Move to next arg to collect potential MPV flags for the interactive mode
        fi
      fi
      MPV_ARGS+=("$1")
      shift
      ;;
  esac
done

# If no MPV arguments were passed on the command line, use the defaults from config
if [[ ${#MPV_ARGS[@]} -eq 0 ]]; then
  MPV_ARGS=("${MPV_DEFAULT_ARGS_ARRAY[@]}")
fi

# --- Execute Direct Play if target was found ---
if [[ -n "$DIRECT_PLAY_TARGET" ]]; then
  echo "‚ñ∂Ô∏è Playing: $DIRECT_PLAY_TARGET"
  mpv "${MPV_ARGS[@]}" "$DIRECT_PLAY_TARGET"
  exit 0
fi

# --- Music Library Indexing Check ---
# Build EXT_FILTER here as it's needed by both build_music_index and update_music_index.
# Moved EXT_FILTER building here to ensure it's always available before indexing calls.
build_ext_filter
# EXT_FILTER is now always built here.

# Logic for handling custom directory vs. default index
INDEX_TO_USE="$MUSIC_INDEX_FILE" # Default to the main index
if [[ -n "$CUSTOM_MUSIC_DIR" ]]; then
    # A custom directory was provided, build a temporary index for it
    build_temp_index "$CUSTOM_MUSIC_DIR" temp_index_file
    INDEX_TO_USE="$temp_index_file"
else
    # No custom directory, ensure the main index exists
    if [[ ! -f "$MUSIC_INDEX_FILE" ]]; then
        echo "Index file '$MUSIC_INDEX_FILE' not found. Building index from scratch."
        build_music_index
    fi
fi


# --- Interactive Mode Selection ---
echo "üéß Pick mode:"
echo "1) Play entire folder(s) (album mode)"
echo "2) Pick individual tracks"
echo "3) Play a saved playlist"
# read -rp "Enter choice [1/2]: " MODE
# Use -t with a very long timeout instead of blocking read
# This allows the SIGINT to be caught by our trap
read -t 31536000 -rp "Enter choice [1/2/3]: " MODE || {
    echo -e "\nRead interrupted. Exiting."
    exit 1
}

if [[ "$MODE" == "1" ]]; then
    # Album Mode
    if [[ ! -f "$INDEX_TO_USE" || ! -s "$INDEX_TO_USE" ]]; then
        echo "Error: Index file is missing or empty. Cannot proceed."
        exit 1
    fi

    create_temp_file temp_folder_list

    # Extract parent directories from the index for fzf
    jq -r '
        .tracks[]
        | (.path | split("/")[:-1] | join("/"))
        | select(length > 0)
    ' "$INDEX_TO_USE" | sort -u | while IFS= read -r dir_path; do
        dir_name=$(basename "$dir_path")
        # For root-level dirs in custom paths, basename might be empty
        if [[ -z "$dir_name" || "$dir_name" == "/" ]]; then
            dir_name="$dir_path"
        fi
        echo "${dir_name}|${dir_path}" # display name | full path
    done > "$temp_folder_list"

    if [[ ! -s "$temp_folder_list" ]]; then
        echo "No playable music folders found in the selection. Please check your source and try again."
        exit 1
    fi

    SELECTED=$(cat "$temp_folder_list" | fzf --multi --with-nth=1 --delimiter="|" --prompt="üìÅ Pick folder(s): " | cut -d'|' -f2) || {
        echo "No folders picked. Monke confused. üôÉ"
        exit 1
    }

    # rm -f "$temp_folder_list"

    mapfile -t FOLDERS <<< "$SELECTED"
    echo "üì¶ Selected ${#FOLDERS[@]} folder(s)."

    FILES=()
    for DIR in "${FOLDERS[@]}"; do
        # Use jq to find all tracks whose paths start with the selected directory's path
        TRACK_PATHS=$(jq -r --arg dir_prefix "${DIR}/" '.tracks[] | select(.path | startswith($dir_prefix)) | .path' "$INDEX_TO_USE")
        while IFS= read -r TRACK_FILE; do
            [[ -n "$TRACK_FILE" ]] && FILES+=("$TRACK_FILE")
        done <<< "$TRACK_PATHS"
    done

    [[ ${#FILES[@]} -eq 0 ]] && echo "No music found in those folders. Monke hear nothing üôä" && exit 1
    echo "üé∂ Found ${#FILES[@]} file(s) total."
    mpv "${MPV_ARGS[@]}" "${FILES[@]}"

elif [[ "$MODE" == "2" ]]; then
    # Track Mode
    if [[ ! -f "$INDEX_TO_USE" || ! -s "$INDEX_TO_USE" ]]; then
        echo "Error: Index file is missing or empty. Cannot proceed."
        exit 1
    fi

    create_temp_file temp_track_list
    jq -r '.tracks[] |
          (if .media_type == "video" then "üé¨ " else "üéµ " end) +
          (.title // "[NO TITLE]") + " " + "|" +
          (.title // "[NO TITLE]") + "|" +
          (.artist // "[NO ARTIST]") + "|" +
          (.album // "[NO ALBUM]") + "|" +
          (.genre // "[NO GENRE]") + "|" +
          (.media_type // "UNKNOWN") + "|" +
          .path' "$INDEX_TO_USE" > "$temp_track_list"

    SELECTED=$(cat "$temp_track_list" | fzf --multi \
      --prompt="üéµ Pick your tracks: " \
      --delimiter="|" \
      --with-nth=1 \
      --preview='echo -e "\033[1;36mTitle:\033[0m {2}\n\033[1;33mArtist:\033[0m {3}\n\033[1;32mAlbum:\033[0m {4}\n\033[1;35mGenre:\033[0m {5}\n\033[1;34mType:\033[0m {6}"' \
      --preview-window=top:5 | awk -F'|' '{print $NF}')

    # rm -f "$temp_track_list"

    mapfile -t FILES <<< "$SELECTED"
    [[ ${#FILES[@]} -eq 0 ]] && echo "No tracks picked. Monke walk away. üö∂" && exit 1
    echo "üé∂ Selected ${#FILES[@]} track(s)."
    mpv "${MPV_ARGS[@]}" "${FILES[@]}"

elif [[ "$MODE" == "3" ]]; then
    # Playlist Mode
    search_paths=()
    if [[ -n "$CUSTOM_MUSIC_DIR" ]]; then
        search_paths=("$CUSTOM_MUSIC_DIR")
    else
        search_paths=("${MUSIC_DIRS_ARRAY[@]}")
    fi

    playlist_filter=()
    for i in "${!PLAYLIST_EXTS_ARRAY[@]}"; do
        playlist_filter+=( -iname "*.${PLAYLIST_EXTS_ARRAY[$i]}" )
        if [[ $((i+1)) -lt ${#PLAYLIST_EXTS_ARRAY[@]} ]]; then
            playlist_filter+=( -o )
        fi
    done

    create_temp_file temp_playlist_list
    # Output: display name | full path
    find "${search_paths[@]}" -type f \( "${playlist_filter[@]}" \) -print0 | \
        while IFS= read -r -d '' file; do
            echo "üìú $(basename "$file")|$file"
        done | sort > "$temp_playlist_list"

    if [[ ! -s "$temp_playlist_list" ]]; then
        echo "No playlists found in the search paths. üêí"
        exit 1
    fi

    SELECTED_PATHS=$(cat "$temp_playlist_list" | fzf --multi \
        --with-nth=1 \
        --delimiter="|" \
        --prompt="üìú Pick playlist(s): " \
        --preview='cat {2}' \
        --preview-window=top:10 | cut -d'|' -f2) || {
        echo "No playlist picked. Monke sad. üçå"
        exit 1
    }

    # The variable now holds the clean paths, ready to use
    mapfile -t FILES <<< "$SELECTED_PATHS"
    if [[ ${#FILES[@]} -eq 0 ]]; then
        echo "No playlists picked. Monke walk away. üö∂"
        exit 1
    fi

    echo "üé∂ Loading ${#FILES[@]} playlist(s)."
    mpv "${MPV_ARGS[@]}" "${FILES[@]}"
else
  echo "Invalid input. Monke smash keyboard in confusion üçåüí•"
  exit 1
fi
